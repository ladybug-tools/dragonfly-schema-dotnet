/* 
 * Dragonfly Model Schema
 *
 * Documentation for Dragonfly model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTNewtonsoft; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonsoft::Newtonsoft.Json;
using LBTNewtonsoft::Newtonsoft.Json.Converters;
using HoneybeeSchema;
using System.ComponentModel.DataAnnotations;


namespace DragonflySchema
{
    /// <summary>
    /// Instructions for a SensorGrid generated from a Room2D&#39;s floors.
    /// </summary>
    [Serializable]
    [DataContract(Name = "RoomGridParameter")]
    public partial class RoomGridParameter : GridParameterBase, IEquatable<RoomGridParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomGridParameter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RoomGridParameter() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "RoomGridParameter";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomGridParameter" /> class.
        /// </summary>
        /// <param name="offset">A number for how far to offset the grid from the Room2D floors. (Default: 1.0, suitable for Models in Meters). (default to 1.0D).</param>
        /// <param name="wallOffset">A number for the distance at which sensors close to walls should be removed. Note that this option has no effect unless the value is more than half of the dimension. (default to 0D).</param>
        /// <param name="dimension">The dimension of the grid cells as a number. (required).</param>
        /// <param name="includeMesh">A boolean to note whether the resulting SensorGrid should include the mesh. (default to true).</param>
        public RoomGridParameter
        (
            double dimension, // Required parameters
            bool includeMesh = true, double offset = 1.0D, double wallOffset = 0D// Optional parameters
        ) : base(dimension: dimension, includeMesh: includeMesh)// BaseClass
        {
            this.Offset = offset;
            this.WallOffset = wallOffset;

            // Set non-required readonly properties with defaultValue
            this.Type = "RoomGridParameter";

            // check if object is valid
            if (this.GetType() == typeof(RoomGridParameter))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public string Type { get; protected set; }  = "RoomGridParameter";

        /// <summary>
        /// A number for how far to offset the grid from the Room2D floors. (Default: 1.0, suitable for Models in Meters).
        /// </summary>
        /// <value>A number for how far to offset the grid from the Room2D floors. (Default: 1.0, suitable for Models in Meters).</value>
        [DataMember(Name = "offset")]
        public double Offset { get; set; }  = 1.0D;
        /// <summary>
        /// A number for the distance at which sensors close to walls should be removed. Note that this option has no effect unless the value is more than half of the dimension.
        /// </summary>
        /// <value>A number for the distance at which sensors close to walls should be removed. Note that this option has no effect unless the value is more than half of the dimension.</value>
        [DataMember(Name = "wall_offset")]
        public double WallOffset { get; set; }  = 0D;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "RoomGridParameter";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("RoomGridParameter:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  IncludeMesh: ").Append(IncludeMesh).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  WallOffset: ").Append(WallOffset).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>RoomGridParameter object</returns>
        public static RoomGridParameter FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<RoomGridParameter>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>RoomGridParameter object</returns>
        public virtual RoomGridParameter DuplicateRoomGridParameter()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateRoomGridParameter();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override GridParameterBase DuplicateGridParameterBase()
        {
            return DuplicateRoomGridParameter();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as RoomGridParameter);
        }

        /// <summary>
        /// Returns true if RoomGridParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of RoomGridParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoomGridParameter input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && base.Equals(input) && 
                (
                    this.WallOffset == input.WallOffset ||
                    (this.WallOffset != null &&
                    this.WallOffset.Equals(input.WallOffset))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.WallOffset != null)
                    hashCode = hashCode * 59 + this.WallOffset.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^RoomGridParameter$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
