/* 
 * Dragonfly Model Schema
 *
 * Documentation for Dragonfly model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using HoneybeeSchema;
using System.ComponentModel.DataAnnotations;


namespace DragonflySchema
{
    /// <summary>
    /// Repeating windows derived from an area ratio with the base wall.
    /// </summary>
    [DataContract(Name = "RepeatingWindowRatio")]
    public partial class RepeatingWindowRatio : OpenAPIGenBaseModel, IEquatable<RepeatingWindowRatio>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RepeatingWindowRatio" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RepeatingWindowRatio() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "RepeatingWindowRatio";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RepeatingWindowRatio" /> class.
        /// </summary>
        /// <param name="windowRatio">A number between 0 and 1 for the ratio between the window area and the parent wall surface area. (required).</param>
        /// <param name="windowHeight">A number for the target height of the windows. Note that, if the window ratio is too large for the height, the ratio will take precedence and the actual window_height will be larger than this value. (required).</param>
        /// <param name="sillHeight">A number for the target height above the bottom edge of the wall to start the windows. Note that, if the ratio is too large for the height, the ratio will take precedence and the sill_height will be smaller than this value. (required).</param>
        /// <param name="horizontalSeparation">A number for the target separation between individual window centerlines.  If this number is larger than the parent rectangle base, only one window will be produced. (required).</param>
        /// <param name="verticalSeparation">An optional number to create a single vertical separation between top and bottom windows. (default to 0D).</param>
        public RepeatingWindowRatio
        (
             double windowRatio, double windowHeight, double sillHeight, double horizontalSeparation, // Required parameters
            double verticalSeparation = 0D// Optional parameters
        ) : base()// BaseClass
        {
            this.WindowRatio = windowRatio;
            this.WindowHeight = windowHeight;
            this.SillHeight = sillHeight;
            this.HorizontalSeparation = horizontalSeparation;
            this.VerticalSeparation = verticalSeparation;

            // Set non-required readonly properties with defaultValue
            this.Type = "RepeatingWindowRatio";
        }

        /// <summary>
        /// A number between 0 and 1 for the ratio between the window area and the parent wall surface area.
        /// </summary>
        /// <value>A number between 0 and 1 for the ratio between the window area and the parent wall surface area.</value>
        [DataMember(Name = "window_ratio", IsRequired = true, EmitDefaultValue = false)]
        public double WindowRatio { get; set; } 
        /// <summary>
        /// A number for the target height of the windows. Note that, if the window ratio is too large for the height, the ratio will take precedence and the actual window_height will be larger than this value.
        /// </summary>
        /// <value>A number for the target height of the windows. Note that, if the window ratio is too large for the height, the ratio will take precedence and the actual window_height will be larger than this value.</value>
        [DataMember(Name = "window_height", IsRequired = true, EmitDefaultValue = false)]
        public double WindowHeight { get; set; } 
        /// <summary>
        /// A number for the target height above the bottom edge of the wall to start the windows. Note that, if the ratio is too large for the height, the ratio will take precedence and the sill_height will be smaller than this value.
        /// </summary>
        /// <value>A number for the target height above the bottom edge of the wall to start the windows. Note that, if the ratio is too large for the height, the ratio will take precedence and the sill_height will be smaller than this value.</value>
        [DataMember(Name = "sill_height", IsRequired = true, EmitDefaultValue = false)]
        public double SillHeight { get; set; } 
        /// <summary>
        /// A number for the target separation between individual window centerlines.  If this number is larger than the parent rectangle base, only one window will be produced.
        /// </summary>
        /// <value>A number for the target separation between individual window centerlines.  If this number is larger than the parent rectangle base, only one window will be produced.</value>
        [DataMember(Name = "horizontal_separation", IsRequired = true, EmitDefaultValue = false)]
        public double HorizontalSeparation { get; set; } 
        /// <summary>
        /// An optional number to create a single vertical separation between top and bottom windows.
        /// </summary>
        /// <value>An optional number to create a single vertical separation between top and bottom windows.</value>
        [DataMember(Name = "vertical_separation", EmitDefaultValue = true)]
        public double VerticalSeparation { get; set; }  = 0D;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "RepeatingWindowRatio";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("RepeatingWindowRatio:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WindowRatio: ").Append(WindowRatio).Append("\n");
            sb.Append("  WindowHeight: ").Append(WindowHeight).Append("\n");
            sb.Append("  SillHeight: ").Append(SillHeight).Append("\n");
            sb.Append("  HorizontalSeparation: ").Append(HorizontalSeparation).Append("\n");
            sb.Append("  VerticalSeparation: ").Append(VerticalSeparation).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>RepeatingWindowRatio object</returns>
        public static RepeatingWindowRatio FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<RepeatingWindowRatio>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>RepeatingWindowRatio object</returns>
        public virtual RepeatingWindowRatio DuplicateRepeatingWindowRatio()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateRepeatingWindowRatio();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateRepeatingWindowRatio();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RepeatingWindowRatio);
        }

        /// <summary>
        /// Returns true if RepeatingWindowRatio instances are equal
        /// </summary>
        /// <param name="input">Instance of RepeatingWindowRatio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RepeatingWindowRatio input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.WindowRatio == input.WindowRatio ||
                    (this.WindowRatio != null &&
                    this.WindowRatio.Equals(input.WindowRatio))
                ) && base.Equals(input) && 
                (
                    this.WindowHeight == input.WindowHeight ||
                    (this.WindowHeight != null &&
                    this.WindowHeight.Equals(input.WindowHeight))
                ) && base.Equals(input) && 
                (
                    this.SillHeight == input.SillHeight ||
                    (this.SillHeight != null &&
                    this.SillHeight.Equals(input.SillHeight))
                ) && base.Equals(input) && 
                (
                    this.HorizontalSeparation == input.HorizontalSeparation ||
                    (this.HorizontalSeparation != null &&
                    this.HorizontalSeparation.Equals(input.HorizontalSeparation))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.VerticalSeparation == input.VerticalSeparation ||
                    (this.VerticalSeparation != null &&
                    this.VerticalSeparation.Equals(input.VerticalSeparation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.WindowRatio != null)
                    hashCode = hashCode * 59 + this.WindowRatio.GetHashCode();
                if (this.WindowHeight != null)
                    hashCode = hashCode * 59 + this.WindowHeight.GetHashCode();
                if (this.SillHeight != null)
                    hashCode = hashCode * 59 + this.SillHeight.GetHashCode();
                if (this.HorizontalSeparation != null)
                    hashCode = hashCode * 59 + this.HorizontalSeparation.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.VerticalSeparation != null)
                    hashCode = hashCode * 59 + this.VerticalSeparation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // HorizontalSeparation (double) minimum
            if(this.HorizontalSeparation < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HorizontalSeparation, must be a value greater than or equal to 0.", new [] { "HorizontalSeparation" });
            }


            
            // Type (string) pattern
            Regex regexType = new Regex(@"^RepeatingWindowRatio$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }


            
            // VerticalSeparation (double) minimum
            if(this.VerticalSeparation < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VerticalSeparation, must be a value greater than or equal to 0.", new [] { "VerticalSeparation" });
            }

            yield break;
        }
    }
}
