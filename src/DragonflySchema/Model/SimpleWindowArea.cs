/* 
 * Dragonfly Model Schema
 *
 * Documentation for Dragonfly model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTNewtonsoft; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonsoft::Newtonsoft.Json;
using LBTNewtonsoft::Newtonsoft.Json.Converters;
using HoneybeeSchema;
using System.ComponentModel.DataAnnotations;


namespace DragonflySchema
{
    /// <summary>
    /// A single window defined by an absolute area.
    /// </summary>
    [Serializable]
    [DataContract(Name = "SimpleWindowArea")]
    public partial class SimpleWindowArea : WindowParameterBase, IEquatable<SimpleWindowArea>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleWindowArea" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimpleWindowArea() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "SimpleWindowArea";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleWindowArea" /> class.
        /// </summary>
        /// <param name="windowArea">A number for the window area in current model units. If this area is larger than the area of the Wall that it is appliedto, the window will fill the parent Wall at a 99 percent ratio. (required).</param>
        /// <param name="userData">Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list). When a list is used, each item in the list will be assigned to the generated Honeybee apertures..</param>
        public SimpleWindowArea
        (
           double windowArea, // Required parameters
            Object userData= default // Optional parameters
        ) : base(userData: userData)// BaseClass
        {
            this.WindowArea = windowArea;

            // Set non-required readonly properties with defaultValue
            this.Type = "SimpleWindowArea";

            // check if object is valid
            if (this.GetType() == typeof(SimpleWindowArea))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public string Type { get; protected set; }  = "SimpleWindowArea";

        /// <summary>
        /// A number for the window area in current model units. If this area is larger than the area of the Wall that it is appliedto, the window will fill the parent Wall at a 99 percent ratio.
        /// </summary>
        /// <value>A number for the window area in current model units. If this area is larger than the area of the Wall that it is appliedto, the window will fill the parent Wall at a 99 percent ratio.</value>
        [DataMember(Name = "window_area", IsRequired = true)]
        public double WindowArea { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "SimpleWindowArea";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("SimpleWindowArea:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  WindowArea: ").Append(WindowArea).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>SimpleWindowArea object</returns>
        public static SimpleWindowArea FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<SimpleWindowArea>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>SimpleWindowArea object</returns>
        public virtual SimpleWindowArea DuplicateSimpleWindowArea()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateSimpleWindowArea();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override WindowParameterBase DuplicateWindowParameterBase()
        {
            return DuplicateSimpleWindowArea();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as SimpleWindowArea);
        }

        /// <summary>
        /// Returns true if SimpleWindowArea instances are equal
        /// </summary>
        /// <param name="input">Instance of SimpleWindowArea to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleWindowArea input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.WindowArea == input.WindowArea ||
                    (this.WindowArea != null &&
                    this.WindowArea.Equals(input.WindowArea))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.WindowArea != null)
                    hashCode = hashCode * 59 + this.WindowArea.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^SimpleWindowArea$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
