/* 
 * Dragonfly Model Schema
 *
 * Documentation for Dragonfly model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTNewtonsoft; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonsoft::Newtonsoft.Json;
using LBTNewtonsoft::Newtonsoft.Json.Converters;
using HoneybeeSchema;
using System.ComponentModel.DataAnnotations;


namespace DragonflySchema
{
    /// <summary>
    /// Instructions for a SensorGrid of radial directions around positions from floors.  This type of sensor grid is particularly helpful for studies of multiple view directions, such as imageless glare studies.
    /// </summary>
    [Serializable]
    [DataContract(Name = "RoomRadialGridParameter")]
    public partial class RoomRadialGridParameter : RoomGridParameter, IEquatable<RoomRadialGridParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomRadialGridParameter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RoomRadialGridParameter() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "RoomRadialGridParameter";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomRadialGridParameter" /> class.
        /// </summary>
        /// <param name="dirCount">A positive integer for the number of radial directions to be generated around each position. (default to 8).</param>
        /// <param name="startVector">A vector as 3 (x, y, z) values to set the start direction of the generated directions. This can be used to orient the resulting sensors to specific parts of the scene. It can also change the elevation of the resulting directions since this start vector will always be rotated in the XY plane to generate the resulting directions..</param>
        /// <param name="meshRadius">An optional number to override the radius of the meshes generated around each sensor. If Autocalculate, it will be equal to 45 percent of the grid dimension..</param>
        /// <param name="dimension">The dimension of the grid cells as a number. (required).</param>
        /// <param name="includeMesh">A boolean to note whether the resulting SensorGrid should include the mesh. (default to true).</param>
        /// <param name="offset">A number for how far to offset the grid from the Room2D floors. (Default: 1.0, suitable for Models in Meters). (default to 1.0D).</param>
        /// <param name="wallOffset">A number for the distance at which sensors close to walls should be removed. Note that this option has no effect unless the value is more than half of the dimension. (default to 0D).</param>
        public RoomRadialGridParameter
        (
            double dimension, // Required parameters
            bool includeMesh = true, double offset = 1.0D, double wallOffset = 0D, int dirCount = 8, List<double> startVector= default, AnyOf<Autocalculate, double> meshRadius= default // Optional parameters
        ) : base(dimension: dimension, includeMesh: includeMesh, offset: offset, wallOffset: wallOffset)// BaseClass
        {
            this.DirCount = dirCount;
            this.StartVector = startVector;
            this.MeshRadius = meshRadius;

            // Set non-required readonly properties with defaultValue
            this.Type = "RoomRadialGridParameter";

            // check if object is valid
            if (this.GetType() == typeof(RoomRadialGridParameter))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public string Type { get; protected set; }  = "RoomRadialGridParameter";

        /// <summary>
        /// A positive integer for the number of radial directions to be generated around each position.
        /// </summary>
        /// <value>A positive integer for the number of radial directions to be generated around each position.</value>
        [DataMember(Name = "dir_count")]
        public int DirCount { get; set; }  = 8;
        /// <summary>
        /// A vector as 3 (x, y, z) values to set the start direction of the generated directions. This can be used to orient the resulting sensors to specific parts of the scene. It can also change the elevation of the resulting directions since this start vector will always be rotated in the XY plane to generate the resulting directions.
        /// </summary>
        /// <value>A vector as 3 (x, y, z) values to set the start direction of the generated directions. This can be used to orient the resulting sensors to specific parts of the scene. It can also change the elevation of the resulting directions since this start vector will always be rotated in the XY plane to generate the resulting directions.</value>
        [DataMember(Name = "start_vector")]
        public List<double> StartVector { get; set; } 
        /// <summary>
        /// An optional number to override the radius of the meshes generated around each sensor. If Autocalculate, it will be equal to 45 percent of the grid dimension.
        /// </summary>
        /// <value>An optional number to override the radius of the meshes generated around each sensor. If Autocalculate, it will be equal to 45 percent of the grid dimension.</value>
        [DataMember(Name = "mesh_radius")]
        public AnyOf<Autocalculate, double> MeshRadius { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "RoomRadialGridParameter";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("RoomRadialGridParameter:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  IncludeMesh: ").Append(IncludeMesh).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  WallOffset: ").Append(WallOffset).Append("\n");
            sb.Append("  DirCount: ").Append(DirCount).Append("\n");
            sb.Append("  StartVector: ").Append(StartVector).Append("\n");
            sb.Append("  MeshRadius: ").Append(MeshRadius).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>RoomRadialGridParameter object</returns>
        public static RoomRadialGridParameter FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<RoomRadialGridParameter>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>RoomRadialGridParameter object</returns>
        public virtual RoomRadialGridParameter DuplicateRoomRadialGridParameter()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateRoomRadialGridParameter();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override RoomGridParameter DuplicateRoomGridParameter()
        {
            return DuplicateRoomRadialGridParameter();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as RoomRadialGridParameter);
        }

        /// <summary>
        /// Returns true if RoomRadialGridParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of RoomRadialGridParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoomRadialGridParameter input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.DirCount == input.DirCount ||
                    (this.DirCount != null &&
                    this.DirCount.Equals(input.DirCount))
                ) && base.Equals(input) && 
                (
                    this.StartVector == input.StartVector ||
                    this.StartVector != null &&
                    input.StartVector != null &&
                    this.StartVector.SequenceEqual(input.StartVector)
                ) && base.Equals(input) && 
                (
                    this.MeshRadius == input.MeshRadius ||
                    (this.MeshRadius != null &&
                    this.MeshRadius.Equals(input.MeshRadius))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DirCount != null)
                    hashCode = hashCode * 59 + this.DirCount.GetHashCode();
                if (this.StartVector != null)
                    hashCode = hashCode * 59 + this.StartVector.GetHashCode();
                if (this.MeshRadius != null)
                    hashCode = hashCode * 59 + this.MeshRadius.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^RoomRadialGridParameter$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
