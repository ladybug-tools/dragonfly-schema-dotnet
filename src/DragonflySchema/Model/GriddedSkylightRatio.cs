/* 
 * Dragonfly Model Schema
 *
 * Documentation for Dragonfly model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTNewtonsoft; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonsoft::Newtonsoft.Json;
using LBTNewtonsoft::Newtonsoft.Json.Converters;
using HoneybeeSchema;
using System.ComponentModel.DataAnnotations;


namespace DragonflySchema
{
    /// <summary>
    /// Gridded skylights derived from an area ratio with the roof.
    /// </summary>
    [Serializable]
    [DataContract(Name = "GriddedSkylightRatio")]
    public partial class GriddedSkylightRatio : OpenAPIGenBaseModel, IEquatable<GriddedSkylightRatio>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GriddedSkylightRatio" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GriddedSkylightRatio() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "GriddedSkylightRatio";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="GriddedSkylightRatio" /> class.
        /// </summary>
        /// <param name="skylightRatio">A number between 0 and 1 for the ratio between the skylight area and the total Roof face area. (required).</param>
        /// <param name="spacing">A number for the spacing between the centers of each grid cell. This should be less than a third of the dimension of the Roof geometry if multiple, evenly-spaced skylights are desired. If Autocalculate, a spacing of one third the smaller dimension of the parent Roof will be automatically assumed..</param>
        public GriddedSkylightRatio
        (
           double skylightRatio, // Required parameters
           AnyOf<Autocalculate, double> spacing= default// Optional parameters
        ) : base()// BaseClass
        {
            this.SkylightRatio = skylightRatio;
            this.Spacing = spacing;

            // Set non-required readonly properties with defaultValue
            this.Type = "GriddedSkylightRatio";

            // check if object is valid
            if (this.GetType() == typeof(GriddedSkylightRatio))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public string Type { get; protected set; }  = "GriddedSkylightRatio";

        /// <summary>
        /// A number between 0 and 1 for the ratio between the skylight area and the total Roof face area.
        /// </summary>
        /// <value>A number between 0 and 1 for the ratio between the skylight area and the total Roof face area.</value>
        [DataMember(Name = "skylight_ratio", IsRequired = true)]
        public double SkylightRatio { get; set; } 
        /// <summary>
        /// A number for the spacing between the centers of each grid cell. This should be less than a third of the dimension of the Roof geometry if multiple, evenly-spaced skylights are desired. If Autocalculate, a spacing of one third the smaller dimension of the parent Roof will be automatically assumed.
        /// </summary>
        /// <value>A number for the spacing between the centers of each grid cell. This should be less than a third of the dimension of the Roof geometry if multiple, evenly-spaced skylights are desired. If Autocalculate, a spacing of one third the smaller dimension of the parent Roof will be automatically assumed.</value>
        [DataMember(Name = "spacing")]
        public AnyOf<Autocalculate, double> Spacing { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "GriddedSkylightRatio";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("GriddedSkylightRatio:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SkylightRatio: ").Append(SkylightRatio).Append("\n");
            sb.Append("  Spacing: ").Append(Spacing).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>GriddedSkylightRatio object</returns>
        public static GriddedSkylightRatio FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<GriddedSkylightRatio>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>GriddedSkylightRatio object</returns>
        public virtual GriddedSkylightRatio DuplicateGriddedSkylightRatio()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateGriddedSkylightRatio();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateGriddedSkylightRatio();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as GriddedSkylightRatio);
        }

        /// <summary>
        /// Returns true if GriddedSkylightRatio instances are equal
        /// </summary>
        /// <param name="input">Instance of GriddedSkylightRatio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GriddedSkylightRatio input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.SkylightRatio == input.SkylightRatio ||
                    (this.SkylightRatio != null &&
                    this.SkylightRatio.Equals(input.SkylightRatio))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.Spacing == input.Spacing ||
                    (this.Spacing != null &&
                    this.Spacing.Equals(input.Spacing))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.SkylightRatio != null)
                    hashCode = hashCode * 59 + this.SkylightRatio.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Spacing != null)
                    hashCode = hashCode * 59 + this.Spacing.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^GriddedSkylightRatio$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
