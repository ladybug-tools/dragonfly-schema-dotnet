name: CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  genNewVersion:
    name: Check and get a new version for release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get Version
        run: |
          cd ./.generator/SchemaGenerator
          MSG=$(dotnet run --updateVersion | grep "New version")
          VERSION=$(echo $MSG | awk -F': ' '{print $2}')
          echo "ReleaseVersion $VERSION"
          echo "ReleaseVersion=$VERSION" >> $GITHUB_ENV
    outputs:
      ReleaseVersion: ${{ env.ReleaseVersion }}

  buildCSharp:
    name: Build release CSharp
    runs-on: windows-latest
    needs: [genNewVersion]
    env:
      RELEASE_VERSION: ${{ needs.genNewVersion.outputs.ReleaseVersion }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate files
        shell: bash
        run: |
          cd ./.generator/SchemaGenerator
          dotnet run --genCsModel --genCsInterface --updateVersion

      - name: Create key pair for signing the assembly
        if: github.ref == 'refs/heads/master'
        working-directory: src/DragonflySchema
        run: |
          "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\sn.exe" -k LadybugTools.snk
          ls
        shell: cmd

      - name: Build
        run: |
          dotnet restore
          dotnet build --configuration Release

      - name: Run Unit Tests
        working-directory: src/DragonflySchema.Tests
        run: dotnet test --configuration Release

      - name: Release CSharp
        working-directory: src/DragonflySchema
        run: dotnet pack --configuration Release --output ./../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nugetPackage
          path: ./*.nupkg

  buildTypeScript:
    name: Build TypeScript
    runs-on: ubuntu-latest
    needs: [genNewVersion]
    env:
      CI: ""
      RELEASE_VERSION: ${{ needs.genNewVersion.outputs.ReleaseVersion }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: generate files
        run: |
          cd ./.generator/SchemaGenerator
          dotnet run --genTsModel --updateVersion

      - name: Install dependencies
        working-directory: src/TypescriptSDK
        run: npm i

      - name: Build and pack package
        working-directory: src/TypescriptSDK
        run: |
          npm run custom-pack
          cp ./*.tgz ./../../

      - name: Unit tests
        working-directory: src/TypescriptSDK.Tests
        run: |
          npm i ./../TypescriptSDK/dragonfly-schema-${{env.RELEASE_VERSION}}.tgz
          npm i honeybee-schema
          npm run test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: npmPackage
          path: ./*.tgz

  release:
    name: Release both CSharp and TypeScript SDK
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [buildCSharp, buildTypeScript, genNewVersion]
    env:
      RELEASE_VERSION: ${{ needs.genNewVersion.outputs.ReleaseVersion }}

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact - nuget
        uses: actions/download-artifact@v4
        with:
          name: nugetPackage

      - name: Download artifact - npm
        uses: actions/download-artifact@v4
        with:
          name: npmPackage

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{env.RELEASE_VERSION}}
          token: ${{ secrets.GH_TOKEN }}
          files: |
            ./*.nupkg
            ./*.tgz

      - name: Release CSharp
        run: dotnet nuget push ./*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json

      - name: Publish to npm
        run: |
          npm set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm publish ./*.tgz --access public
